package com.example.demo.pojo.controller;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.factory.PasswordEncoderFactories;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	
	  @Bean public UserDetailsService userDetailsService() { PasswordEncoder
	  encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();
	  
	  User.UserBuilder userBuilder =
	  User.builder().passwordEncoder(encoder::encode); UserDetails user =
	  userBuilder.username("user").password("password") .roles("USER").build();
	  UserDetails admin = userBuilder.username("admin").password("password")
	  .roles("ADMIN").build();
	  //gdf
	  return new InMemoryUserDetailsManager(user,admin); }
	 
	 
	
	
	/*
	 * @Autowired public void configureGlobal(AuthenticationManagerBuilder auth)
	 * throws Exception {
	 * auth.inMemoryAuthentication().withUser("admin1").password("admin1").roles(
	 * "ACTRADMIN");
	 * 
	 * }
	 */
	 
	/*
	 * @Override protected void configure(HttpSecurity http) throws Exception { http
	 * .authorizeRequests() .anyRequest().authenticated() .and() .formLogin() .and()
	 * .httpBasic(); http .authorizeRequests() .antMatchers("/**").permitAll()
	 * .anyRequest().authenticated(); }
	 */
	 
	/*
	 * @Bean
	 * 
	 * @Autowired public SecurityWebFilterChain securityWebFilterChain(HttpSecurity
	 * http) { return http .headers() .frameOptions().sameOrigin() .and()
	 * .authorizeRequests() .antMatchers("/resources/**",
	 * "/webjars/**","/assets/**").permitAll() .antMatchers("/").permitAll()
	 * .antMatchers("/admin/**").hasRole("ADMIN") .anyRequest().authenticated()
	 * .and() .formLogin() .loginPage("/login") .defaultSuccessUrl("/home")
	 * .failureUrl("/login?error") .permitAll() .and() .logout()
	 * .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
	 * .logoutSuccessUrl("/login?logout") .deleteCookies("my-remember-me-cookie")
	 * .permitAll() .and() .rememberMe() //.key("my-secure-key")
	 * .rememberMeCookieName("my-remember-me-cookie")
	 * .tokenRepository(PersistentTokenBasedRememberMeServices())
	 * .tokenValiditySeconds(24 * 60 * 60) .and() .exceptionHandling() ; }
	 */
}