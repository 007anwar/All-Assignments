package com.javainuse;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.ConnectionFactory;
import com.rabbitmq.client.DeliverCallback;

public class Recv extends Thread {
	static boolean flag = true;
	private final static String QUEUE_NAME = "hello";
	private static final int DELAY = 3000;

	public static void main(String[] argv) throws Exception {
		ConnectionFactory factory = new ConnectionFactory();
		factory.setHost("localhost");
		Connection connection = factory.newConnection();
		Channel channel = connection.createChannel();

		channel.queueDeclare(QUEUE_NAME, false, false, false, null);
		System.out.println(" [*] Waiting for messages");

		DeliverCallback deliverCallback = (consumerTag, delivery) -> {
			if (flag) {
				flag = false;

				String message = new String(delivery.getBody(), "UTF-8");
				try {
					System.out.println(" Received message is: '" + message + "'");
					System.out.println("Server is processing request");

					Thread.sleep(DELAY);// Any Process that takes time to execute
					flag = true;
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				// message.setDelay("DELAY");
				// delivery.getBody();
				System.out.println(" vm created \n");
				// System.out.println(" /n '" + message + "'");
			}
		};
		channel.basicConsume(QUEUE_NAME, true, deliverCallback, consumerTag -> {

		});

	}

}